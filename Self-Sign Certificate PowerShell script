# Check if a domain name argument is provided
if ($args.Length -ne 1) {
    Write-Host "Error: No domain name argument provided"
    Write-Host "Usage: Provide a domain name as an argument"
    exit 1
}

$DOMAIN = $args[0]

# Create root CA & Private key
openssl req -x509 `
            -sha256 -days 356 `
            -nodes `
            -newkey rsa:2048 `
            -subj "/CN=$DOMAIN/C=US/L=San Fransisco" `
            -keyout rootCA.key -out rootCA.crt 

# Generate Private key 
openssl genrsa -out "$DOMAIN.key" 2048

# Create csr.conf file
@"
[ req ]
default_bits = 2048
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[ dn ]
C = US
ST = California
L = San Fransisco
O = MyOrg
OU = MyOrg Ops
CN = $DOMAIN

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = $DOMAIN
DNS.2 = www.$DOMAIN
IP.1 = 10.6.1.5 
IP.2 = 10.6.1.6
"@ | Set-Content -Path "csr.conf"

# Create CSR request using private key
openssl req -new -key "$DOMAIN.key" -out "$DOMAIN.csr" -config "csr.conf"

# Create an external config file for the certificate
@"
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = $DOMAIN
"@ | Set-Content -Path "cert.conf"

# Create SSL certificate with self-signed CA
openssl x509 -req `
    -in "$DOMAIN.csr" `
    -CA rootCA.crt -CAkey rootCA.key `
    -CAcreateserial -out "$DOMAIN.crt" `
    -days 365 `
    -sha256 -extfile "cert.conf"
